{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nPLS Travels Fleet Management System is a comprehensive web application designed for managing fleet operations with role-based access control. The system supports three user roles: Admin, Manager, and Driver, each with tailored dashboards and functionalities. The application handles driver management, vehicle tracking, trip logging, automated payout calculations, and approval workflows.\n\nKey features include:\n- **Smart Payout Formula**: Automated calculations using `pay = min(revenue, 2250) * 0.30 + max(revenue - 2250, 0) * 0.70`\n- **Role-based Dashboards**: Different interfaces for Admin, Manager, and Driver users\n- **Mobile-first Design**: Optimized driver experience for smartphone usage\n- **Trip Management**: Manual trip entry with revenue tracking and payout calculations\n- **Approval Workflows**: Manager approval system for payouts and expenses\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with role-based endpoint access\n- **Session Management**: Express sessions with PostgreSQL storage\n- **Middleware**: Custom logging, error handling, and authentication middleware\n\n## Authentication & Authorization\n- **Provider**: Replit Auth using OpenID Connect (OIDC)\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **Role System**: Three-tier role system (admin, manager, driver) with hierarchical permissions\n- **Security**: HTTP-only cookies, CSRF protection, and secure session management\n\n## Database Design\n- **Primary Database**: PostgreSQL with Drizzle ORM\n- **Connection**: Neon serverless PostgreSQL with connection pooling\n- **Schema Management**: Drizzle migrations with TypeScript schema definitions\n- **Key Entities**: Users, Drivers, Vehicles, Trips, Payouts, Assignments, Incidents, Documents\n- **Data Relationships**: Foreign key constraints with proper relational design\n\n## Application Structure\n- **Monorepo Layout**: Shared schema between client and server in `/shared` directory\n- **Client Structure**: Component-based architecture with UI components, pages, and hooks\n- **Server Structure**: Route handlers, storage layer abstraction, and database operations\n- **Type Safety**: Full TypeScript coverage with shared types between frontend and backend\n\n## Business Logic Implementation\n- **Payout Calculations**: Server-side formula implementation with real-time preview\n- **Role-based Views**: Conditional rendering based on user roles and permissions\n- **Mobile Responsiveness**: Separate navigation patterns for mobile and desktop users\n- **Data Validation**: Zod schemas for runtime type checking and validation\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database operations and migration management\n\n## Authentication\n- **Replit Auth**: OpenID Connect authentication provider\n- **Session Storage**: PostgreSQL-backed session persistence\n\n## UI Components\n- **Radix UI**: Unstyled, accessible component primitives\n- **Shadcn/ui**: Pre-built component library based on Radix UI\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n\n## Development Tools\n- **Vite**: Fast build tool with React plugin and development server\n- **TypeScript**: Static type checking across the entire application\n- **ESBuild**: Production bundling for server-side code\n\n## Runtime Libraries\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime schema validation\n- **Date-fns**: Date manipulation and formatting utilities\n- **Wouter**: Lightweight client-side routing","size_bytes":4264},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertDriverSchema,\n  insertVehicleSchema,\n  insertTripSchema,\n  insertAssignmentSchema,\n  insertFuelStationSchema,\n  insertFuelRecordSchema,\n  insertDriverChecklistSchema,\n  insertChecklistItemSchema,\n  insertMaintenanceRecordSchema,\n  insertMaintenanceTaskSchema,\n  insertInventoryItemSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Payout calculation formula\nfunction calculatePayout(revenue: number): number {\n  return Math.min(revenue, 2250) * 0.30 + Math.max(revenue - 2250, 0) * 0.70;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get driver profile if user is a driver\n      let driverProfile = null;\n      if (user.role === 'driver') {\n        driverProfile = await storage.getDriverByUserId(userId);\n      }\n\n      res.json({ ...user, driverProfile });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Driver routes\n  app.get('/api/drivers', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const drivers = await storage.getAllDrivers();\n      res.json(drivers);\n    } catch (error) {\n      console.error(\"Error fetching drivers:\", error);\n      res.status(500).json({ message: \"Failed to fetch drivers\" });\n    }\n  });\n\n  app.post('/api/drivers', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const driverData = insertDriverSchema.parse(req.body);\n      const driver = await storage.createDriver(driverData);\n      res.status(201).json(driver);\n    } catch (error) {\n      console.error(\"Error creating driver:\", error);\n      res.status(500).json({ message: \"Failed to create driver\" });\n    }\n  });\n\n  // Vehicle routes\n  app.get('/api/vehicles', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const vehicles = await storage.getAllVehicles();\n      res.json(vehicles);\n    } catch (error) {\n      console.error(\"Error fetching vehicles:\", error);\n      res.status(500).json({ message: \"Failed to fetch vehicles\" });\n    }\n  });\n\n  app.post('/api/vehicles', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const vehicleData = insertVehicleSchema.parse(req.body);\n      const vehicle = await storage.createVehicle(vehicleData);\n      res.status(201).json(vehicle);\n    } catch (error) {\n      console.error(\"Error creating vehicle:\", error);\n      res.status(500).json({ message: \"Failed to create vehicle\" });\n    }\n  });\n\n  // Assignment routes\n  app.post('/api/assignments', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const assignmentData = insertAssignmentSchema.parse(req.body);\n      \n      // Deactivate existing assignment for the driver\n      const existingAssignment = await storage.getActiveAssignmentByDriverId(assignmentData.driverId!);\n      if (existingAssignment) {\n        await storage.deactivateAssignment(existingAssignment.id);\n      }\n\n      const assignment = await storage.createAssignment(assignmentData);\n      res.status(201).json(assignment);\n    } catch (error) {\n      console.error(\"Error creating assignment:\", error);\n      res.status(500).json({ message: \"Failed to create assignment\" });\n    }\n  });\n\n  // Trip routes\n  app.get('/api/trips', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let trips;\n      if (user.role === 'driver') {\n        const driver = await storage.getDriverByUserId(userId);\n        if (!driver) {\n          return res.status(404).json({ message: \"Driver profile not found\" });\n        }\n        trips = await storage.getTripsByDriverId(driver.id);\n      } else {\n        trips = await storage.getAllTrips();\n      }\n\n      res.json(trips);\n    } catch (error) {\n      console.error(\"Error fetching trips:\", error);\n      res.status(500).json({ message: \"Failed to fetch trips\" });\n    }\n  });\n\n  app.post('/api/trips', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const driver = await storage.getDriverByUserId(userId);\n      if (!driver) {\n        return res.status(404).json({ message: \"Driver profile not found\" });\n      }\n\n      // Get active assignment\n      const assignment = await storage.getActiveAssignmentByDriverId(driver.id);\n      if (!assignment) {\n        return res.status(400).json({ message: \"No active vehicle assignment found\" });\n      }\n\n      const tripData = insertTripSchema.parse({\n        ...req.body,\n        driverId: driver.id,\n        vehicleId: assignment.vehicleId,\n        status: 'completed',\n        startTime: new Date(),\n        endTime: new Date(),\n      });\n\n      const trip = await storage.createTrip(tripData);\n\n      // Create payout record\n      const revenue = parseFloat(trip.revenue);\n      const calculatedAmount = calculatePayout(revenue);\n\n      await storage.createPayout({\n        tripId: trip.id,\n        driverId: driver.id,\n        revenue: trip.revenue,\n        calculatedAmount: calculatedAmount.toString(),\n        status: 'pending',\n      });\n\n      res.status(201).json(trip);\n    } catch (error) {\n      console.error(\"Error creating trip:\", error);\n      res.status(500).json({ message: \"Failed to create trip\" });\n    }\n  });\n\n  // Payout routes\n  app.get('/api/payouts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let payouts;\n      if (user.role === 'driver') {\n        const driver = await storage.getDriverByUserId(userId);\n        if (!driver) {\n          return res.status(404).json({ message: \"Driver profile not found\" });\n        }\n        payouts = await storage.getPayoutsByDriverId(driver.id);\n      } else {\n        payouts = await storage.getPendingPayouts();\n      }\n\n      res.json(payouts);\n    } catch (error) {\n      console.error(\"Error fetching payouts:\", error);\n      res.status(500).json({ message: \"Failed to fetch payouts\" });\n    }\n  });\n\n  app.patch('/api/payouts/:id/approve', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { id } = req.params;\n      const { approvedAmount, notes } = req.body;\n\n      const updatedPayout = await storage.updatePayout(id, {\n        status: 'approved',\n        approvedAmount: approvedAmount || undefined,\n        approvedBy: user.id,\n        approvedAt: new Date(),\n        notes: notes || undefined,\n      });\n\n      res.json(updatedPayout);\n    } catch (error) {\n      console.error(\"Error approving payout:\", error);\n      res.status(500).json({ message: \"Failed to approve payout\" });\n    }\n  });\n\n  app.patch('/api/payouts/:id/reject', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { id } = req.params;\n      const { notes } = req.body;\n\n      const updatedPayout = await storage.updatePayout(id, {\n        status: 'rejected',\n        approvedBy: user.id,\n        approvedAt: new Date(),\n        notes: notes || undefined,\n      });\n\n      res.json(updatedPayout);\n    } catch (error) {\n      console.error(\"Error rejecting payout:\", error);\n      res.status(500).json({ message: \"Failed to reject payout\" });\n    }\n  });\n\n  // Dashboard stats routes\n  app.get('/api/dashboard/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const [drivers, vehicles, trips, pendingPayouts] = await Promise.all([\n        storage.getAllDrivers(),\n        storage.getAllVehicles(),\n        storage.getAllTrips(),\n        storage.getPendingPayouts(),\n      ]);\n\n      // Calculate today's revenue\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const todayTrips = trips.filter(trip => \n        trip.createdAt && new Date(trip.createdAt) >= today\n      );\n      const dailyRevenue = todayTrips.reduce((sum, trip) => sum + parseFloat(trip.revenue), 0);\n\n      // Calculate pending payout amount\n      const pendingPayoutAmount = pendingPayouts.reduce((sum, payout) => \n        sum + parseFloat(payout.calculatedAmount), 0\n      );\n\n      const stats = {\n        activeDrivers: drivers.filter(d => d.isActive).length,\n        fleetSize: vehicles.filter(v => v.status === 'active').length,\n        dailyRevenue: dailyRevenue,\n        pendingPayouts: pendingPayoutAmount,\n      };\n\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Fuel station routes\n  app.get('/api/fuel-stations', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const fuelStations = await storage.getAllFuelStations();\n      res.json(fuelStations);\n    } catch (error) {\n      console.error(\"Error fetching fuel stations:\", error);\n      res.status(500).json({ message: \"Failed to fetch fuel stations\" });\n    }\n  });\n\n  app.post('/api/fuel-stations', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const fuelStationData = insertFuelStationSchema.parse(req.body);\n      const fuelStation = await storage.createFuelStation(fuelStationData);\n      res.status(201).json(fuelStation);\n    } catch (error) {\n      console.error(\"Error creating fuel station:\", error);\n      res.status(500).json({ message: \"Failed to create fuel station\" });\n    }\n  });\n\n  // Fuel record routes\n  app.get('/api/fuel-records', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let fuelRecords;\n      if (user.role === 'driver') {\n        const driver = await storage.getDriverByUserId(userId);\n        if (!driver) {\n          return res.status(404).json({ message: \"Driver profile not found\" });\n        }\n        fuelRecords = await storage.getFuelRecordsByDriverId(driver.id);\n      } else {\n        fuelRecords = await storage.getAllFuelRecords();\n      }\n\n      res.json(fuelRecords);\n    } catch (error) {\n      console.error(\"Error fetching fuel records:\", error);\n      res.status(500).json({ message: \"Failed to fetch fuel records\" });\n    }\n  });\n\n  app.post('/api/fuel-records', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const driver = await storage.getDriverByUserId(userId);\n      if (!driver) {\n        return res.status(404).json({ message: \"Driver profile not found\" });\n      }\n\n      // Get active assignment\n      const assignment = await storage.getActiveAssignmentByDriverId(driver.id);\n      if (!assignment) {\n        return res.status(400).json({ message: \"No active vehicle assignment found\" });\n      }\n\n      const fuelRecordData = insertFuelRecordSchema.parse({\n        ...req.body,\n        driverId: driver.id,\n        vehicleId: assignment.vehicleId,\n      });\n\n      const fuelRecord = await storage.createFuelRecord(fuelRecordData);\n      res.status(201).json(fuelRecord);\n    } catch (error) {\n      console.error(\"Error creating fuel record:\", error);\n      res.status(500).json({ message: \"Failed to create fuel record\" });\n    }\n  });\n\n  // Driver checklist routes\n  app.get('/api/checklists', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let checklists;\n      if (user.role === 'driver') {\n        const driver = await storage.getDriverByUserId(userId);\n        if (!driver) {\n          return res.status(404).json({ message: \"Driver profile not found\" });\n        }\n        checklists = await storage.getChecklistsByDriverId(driver.id);\n      } else {\n        // For admin/manager, get all checklists - would need to add this method\n        checklists = [];\n      }\n\n      res.json(checklists);\n    } catch (error) {\n      console.error(\"Error fetching checklists:\", error);\n      res.status(500).json({ message: \"Failed to fetch checklists\" });\n    }\n  });\n\n  app.post('/api/checklists', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const driver = await storage.getDriverByUserId(userId);\n      if (!driver) {\n        return res.status(404).json({ message: \"Driver profile not found\" });\n      }\n\n      // Get active assignment\n      const assignment = await storage.getActiveAssignmentByDriverId(driver.id);\n      if (!assignment) {\n        return res.status(400).json({ message: \"No active vehicle assignment found\" });\n      }\n\n      const checklistData = insertDriverChecklistSchema.parse({\n        ...req.body,\n        driverId: driver.id,\n        vehicleId: assignment.vehicleId,\n      });\n\n      const checklist = await storage.createDriverChecklist(checklistData);\n      res.status(201).json(checklist);\n    } catch (error) {\n      console.error(\"Error creating checklist:\", error);\n      res.status(500).json({ message: \"Failed to create checklist\" });\n    }\n  });\n\n  app.patch('/api/checklists/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const updates = {\n        ...req.body,\n        completedAt: req.body.status === 'completed' ? new Date() : undefined,\n      };\n\n      const updatedChecklist = await storage.updateDriverChecklist(id, updates);\n      res.json(updatedChecklist);\n    } catch (error) {\n      console.error(\"Error updating checklist:\", error);\n      res.status(500).json({ message: \"Failed to update checklist\" });\n    }\n  });\n\n  // Checklist items routes\n  app.get('/api/checklists/:checklistId/items', isAuthenticated, async (req: any, res) => {\n    try {\n      const { checklistId } = req.params;\n      const items = await storage.getChecklistItemsByChecklistId(checklistId);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching checklist items:\", error);\n      res.status(500).json({ message: \"Failed to fetch checklist items\" });\n    }\n  });\n\n  app.post('/api/checklists/:checklistId/items', isAuthenticated, async (req: any, res) => {\n    try {\n      const { checklistId } = req.params;\n      const itemData = insertChecklistItemSchema.parse({\n        ...req.body,\n        checklistId,\n      });\n\n      const item = await storage.createChecklistItem(itemData);\n      res.status(201).json(item);\n    } catch (error) {\n      console.error(\"Error creating checklist item:\", error);\n      res.status(500).json({ message: \"Failed to create checklist item\" });\n    }\n  });\n\n  app.patch('/api/checklist-items/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updatedItem = await storage.updateChecklistItem(id, req.body);\n      res.json(updatedItem);\n    } catch (error) {\n      console.error(\"Error updating checklist item:\", error);\n      res.status(500).json({ message: \"Failed to update checklist item\" });\n    }\n  });\n\n  // Maintenance record routes\n  app.get('/api/maintenance', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const maintenanceRecords = await storage.getAllMaintenanceRecords();\n      res.json(maintenanceRecords);\n    } catch (error) {\n      console.error(\"Error fetching maintenance records:\", error);\n      res.status(500).json({ message: \"Failed to fetch maintenance records\" });\n    }\n  });\n\n  app.post('/api/maintenance', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const maintenanceData = insertMaintenanceRecordSchema.parse(req.body);\n      const maintenanceRecord = await storage.createMaintenanceRecord(maintenanceData);\n      res.status(201).json(maintenanceRecord);\n    } catch (error) {\n      console.error(\"Error creating maintenance record:\", error);\n      res.status(500).json({ message: \"Failed to create maintenance record\" });\n    }\n  });\n\n  app.patch('/api/maintenance/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { id } = req.params;\n      const updates = {\n        ...req.body,\n        completedDate: req.body.status === 'completed' ? new Date() : undefined,\n      };\n\n      const updatedRecord = await storage.updateMaintenanceRecord(id, updates);\n      res.json(updatedRecord);\n    } catch (error) {\n      console.error(\"Error updating maintenance record:\", error);\n      res.status(500).json({ message: \"Failed to update maintenance record\" });\n    }\n  });\n\n  // Maintenance task routes\n  app.get('/api/maintenance/:recordId/tasks', isAuthenticated, async (req: any, res) => {\n    try {\n      const { recordId } = req.params;\n      const tasks = await storage.getMaintenanceTasksByRecordId(recordId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching maintenance tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch maintenance tasks\" });\n    }\n  });\n\n  app.post('/api/maintenance/:recordId/tasks', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { recordId } = req.params;\n      const taskData = insertMaintenanceTaskSchema.parse({\n        ...req.body,\n        maintenanceRecordId: recordId,\n      });\n\n      const task = await storage.createMaintenanceTask(taskData);\n      res.status(201).json(task);\n    } catch (error) {\n      console.error(\"Error creating maintenance task:\", error);\n      res.status(500).json({ message: \"Failed to create maintenance task\" });\n    }\n  });\n\n  app.patch('/api/maintenance-tasks/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { id } = req.params;\n      const updatedTask = await storage.updateMaintenanceTask(id, req.body);\n      res.json(updatedTask);\n    } catch (error) {\n      console.error(\"Error updating maintenance task:\", error);\n      res.status(500).json({ message: \"Failed to update maintenance task\" });\n    }\n  });\n\n  // Inventory routes\n  app.get('/api/inventory', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const inventoryItems = await storage.getAllInventoryItems();\n      res.json(inventoryItems);\n    } catch (error) {\n      console.error(\"Error fetching inventory:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.post('/api/inventory', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const inventoryData = insertInventoryItemSchema.parse(req.body);\n      const inventoryItem = await storage.createInventoryItem(inventoryData);\n      res.status(201).json(inventoryItem);\n    } catch (error) {\n      console.error(\"Error creating inventory item:\", error);\n      res.status(500).json({ message: \"Failed to create inventory item\" });\n    }\n  });\n\n  app.patch('/api/inventory/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { id } = req.params;\n      const updatedItem = await storage.updateInventoryItem(id, req.body);\n      res.json(updatedItem);\n    } catch (error) {\n      console.error(\"Error updating inventory item:\", error);\n      res.status(500).json({ message: \"Failed to update inventory item\" });\n    }\n  });\n\n  app.get('/api/inventory/low-stock', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || !['admin', 'manager'].includes(user.role)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const lowStockItems = await storage.getLowStockItems();\n      res.json(lowStockItems);\n    } catch (error) {\n      console.error(\"Error fetching low stock items:\", error);\n      res.status(500).json({ message: \"Failed to fetch low stock items\" });\n    }\n  });\n\n  // Utility route for payout calculation\n  app.post('/api/calculate-payout', (req, res) => {\n    try {\n      const { revenue } = req.body;\n      const payout = calculatePayout(parseFloat(revenue) || 0);\n      res.json({ payout, formula: `min(${revenue}, 2250) × 0.30 + max(${revenue} - 2250, 0) × 0.70` });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid revenue amount\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":24920},"server/storage.ts":{"content":"import {\n  users,\n  drivers,\n  vehicles,\n  trips,\n  payouts,\n  assignments,\n  incidents,\n  documents,\n  fuelStations,\n  fuelRecords,\n  driverChecklists,\n  checklistItems,\n  maintenanceRecords,\n  maintenanceTasks,\n  inventoryItems,\n  type User,\n  type UpsertUser,\n  type Driver,\n  type InsertDriver,\n  type Vehicle,\n  type InsertVehicle,\n  type Trip,\n  type InsertTrip,\n  type Payout,\n  type InsertPayout,\n  type Assignment,\n  type InsertAssignment,\n  type Incident,\n  type InsertIncident,\n  type Document,\n  type InsertDocument,\n  type FuelStation,\n  type InsertFuelStation,\n  type FuelRecord,\n  type InsertFuelRecord,\n  type DriverChecklist,\n  type InsertDriverChecklist,\n  type ChecklistItem,\n  type InsertChecklistItem,\n  type MaintenanceRecord,\n  type InsertMaintenanceRecord,\n  type MaintenanceTask,\n  type InsertMaintenanceTask,\n  type InventoryItem,\n  type InsertInventoryItem,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, isNull, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Driver operations\n  getDriver(id: string): Promise<Driver | undefined>;\n  getDriverByUserId(userId: string): Promise<Driver | undefined>;\n  createDriver(driver: InsertDriver): Promise<Driver>;\n  updateDriver(id: string, updates: Partial<InsertDriver>): Promise<Driver>;\n  getAllDrivers(): Promise<Driver[]>;\n  \n  // Vehicle operations\n  getVehicle(id: string): Promise<Vehicle | undefined>;\n  createVehicle(vehicle: InsertVehicle): Promise<Vehicle>;\n  updateVehicle(id: string, updates: Partial<InsertVehicle>): Promise<Vehicle>;\n  getAllVehicles(): Promise<Vehicle[]>;\n  \n  // Assignment operations\n  createAssignment(assignment: InsertAssignment): Promise<Assignment>;\n  getActiveAssignmentByDriverId(driverId: string): Promise<Assignment | undefined>;\n  deactivateAssignment(assignmentId: string): Promise<void>;\n  \n  // Trip operations\n  createTrip(trip: InsertTrip): Promise<Trip>;\n  updateTrip(id: string, updates: Partial<InsertTrip>): Promise<Trip>;\n  getTripsByDriverId(driverId: string): Promise<Trip[]>;\n  getAllTrips(): Promise<Trip[]>;\n  getTrip(id: string): Promise<Trip | undefined>;\n  \n  // Payout operations\n  createPayout(payout: InsertPayout): Promise<Payout>;\n  updatePayout(id: string, updates: Partial<InsertPayout>): Promise<Payout>;\n  getPendingPayouts(): Promise<Payout[]>;\n  getPayoutsByDriverId(driverId: string): Promise<Payout[]>;\n  \n  // Incident operations\n  createIncident(incident: InsertIncident): Promise<Incident>;\n  getAllIncidents(): Promise<Incident[]>;\n  \n  // Document operations\n  createDocument(document: InsertDocument): Promise<Document>;\n  getDocumentsByEntity(entityId: string, entityType: string): Promise<Document[]>;\n  \n  // Fuel station operations\n  createFuelStation(fuelStation: InsertFuelStation): Promise<FuelStation>;\n  getAllFuelStations(): Promise<FuelStation[]>;\n  updateFuelStation(id: string, updates: Partial<InsertFuelStation>): Promise<FuelStation>;\n  \n  // Fuel record operations\n  createFuelRecord(fuelRecord: InsertFuelRecord): Promise<FuelRecord>;\n  getFuelRecordsByVehicleId(vehicleId: string): Promise<FuelRecord[]>;\n  getFuelRecordsByDriverId(driverId: string): Promise<FuelRecord[]>;\n  getAllFuelRecords(): Promise<FuelRecord[]>;\n  \n  // Driver checklist operations\n  createDriverChecklist(checklist: InsertDriverChecklist): Promise<DriverChecklist>;\n  getChecklistsByDriverId(driverId: string): Promise<DriverChecklist[]>;\n  updateDriverChecklist(id: string, updates: Partial<InsertDriverChecklist>): Promise<DriverChecklist>;\n  \n  // Checklist item operations\n  createChecklistItem(item: InsertChecklistItem): Promise<ChecklistItem>;\n  getChecklistItemsByChecklistId(checklistId: string): Promise<ChecklistItem[]>;\n  updateChecklistItem(id: string, updates: Partial<InsertChecklistItem>): Promise<ChecklistItem>;\n  \n  // Maintenance record operations\n  createMaintenanceRecord(record: InsertMaintenanceRecord): Promise<MaintenanceRecord>;\n  getMaintenanceRecordsByVehicleId(vehicleId: string): Promise<MaintenanceRecord[]>;\n  getAllMaintenanceRecords(): Promise<MaintenanceRecord[]>;\n  updateMaintenanceRecord(id: string, updates: Partial<InsertMaintenanceRecord>): Promise<MaintenanceRecord>;\n  \n  // Maintenance task operations\n  createMaintenanceTask(task: InsertMaintenanceTask): Promise<MaintenanceTask>;\n  getMaintenanceTasksByRecordId(recordId: string): Promise<MaintenanceTask[]>;\n  updateMaintenanceTask(id: string, updates: Partial<InsertMaintenanceTask>): Promise<MaintenanceTask>;\n  \n  // Inventory operations\n  createInventoryItem(item: InsertInventoryItem): Promise<InventoryItem>;\n  getAllInventoryItems(): Promise<InventoryItem[]>;\n  updateInventoryItem(id: string, updates: Partial<InsertInventoryItem>): Promise<InventoryItem>;\n  getLowStockItems(): Promise<InventoryItem[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Driver operations\n  async getDriver(id: string): Promise<Driver | undefined> {\n    const [driver] = await db.select().from(drivers).where(eq(drivers.id, id));\n    return driver;\n  }\n\n  async getDriverByUserId(userId: string): Promise<Driver | undefined> {\n    const [driver] = await db.select().from(drivers).where(eq(drivers.userId, userId));\n    return driver;\n  }\n\n  async createDriver(driver: InsertDriver): Promise<Driver> {\n    const [newDriver] = await db.insert(drivers).values(driver).returning();\n    return newDriver;\n  }\n\n  async updateDriver(id: string, updates: Partial<InsertDriver>): Promise<Driver> {\n    const [updatedDriver] = await db\n      .update(drivers)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(drivers.id, id))\n      .returning();\n    return updatedDriver;\n  }\n\n  async getAllDrivers(): Promise<Driver[]> {\n    return await db.select().from(drivers).where(eq(drivers.isActive, true));\n  }\n\n  // Vehicle operations\n  async getVehicle(id: string): Promise<Vehicle | undefined> {\n    const [vehicle] = await db.select().from(vehicles).where(eq(vehicles.id, id));\n    return vehicle;\n  }\n\n  async createVehicle(vehicle: InsertVehicle): Promise<Vehicle> {\n    const [newVehicle] = await db.insert(vehicles).values(vehicle).returning();\n    return newVehicle;\n  }\n\n  async updateVehicle(id: string, updates: Partial<InsertVehicle>): Promise<Vehicle> {\n    const [updatedVehicle] = await db\n      .update(vehicles)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(vehicles.id, id))\n      .returning();\n    return updatedVehicle;\n  }\n\n  async getAllVehicles(): Promise<Vehicle[]> {\n    return await db.select().from(vehicles);\n  }\n\n  // Assignment operations\n  async createAssignment(assignment: InsertAssignment): Promise<Assignment> {\n    const [newAssignment] = await db.insert(assignments).values(assignment).returning();\n    return newAssignment;\n  }\n\n  async getActiveAssignmentByDriverId(driverId: string): Promise<Assignment | undefined> {\n    const [assignment] = await db\n      .select()\n      .from(assignments)\n      .where(and(eq(assignments.driverId, driverId), eq(assignments.isActive, true)));\n    return assignment;\n  }\n\n  async deactivateAssignment(assignmentId: string): Promise<void> {\n    await db\n      .update(assignments)\n      .set({ isActive: false, unassignedAt: new Date() })\n      .where(eq(assignments.id, assignmentId));\n  }\n\n  // Trip operations\n  async createTrip(trip: InsertTrip): Promise<Trip> {\n    const [newTrip] = await db.insert(trips).values(trip).returning();\n    return newTrip;\n  }\n\n  async updateTrip(id: string, updates: Partial<InsertTrip>): Promise<Trip> {\n    const [updatedTrip] = await db\n      .update(trips)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(trips.id, id))\n      .returning();\n    return updatedTrip;\n  }\n\n  async getTripsByDriverId(driverId: string): Promise<Trip[]> {\n    return await db\n      .select()\n      .from(trips)\n      .where(eq(trips.driverId, driverId))\n      .orderBy(desc(trips.createdAt));\n  }\n\n  async getAllTrips(): Promise<Trip[]> {\n    return await db\n      .select()\n      .from(trips)\n      .orderBy(desc(trips.createdAt));\n  }\n\n  async getTrip(id: string): Promise<Trip | undefined> {\n    const [trip] = await db.select().from(trips).where(eq(trips.id, id));\n    return trip;\n  }\n\n  // Payout operations\n  async createPayout(payout: InsertPayout): Promise<Payout> {\n    const [newPayout] = await db.insert(payouts).values(payout).returning();\n    return newPayout;\n  }\n\n  async updatePayout(id: string, updates: Partial<InsertPayout>): Promise<Payout> {\n    const [updatedPayout] = await db\n      .update(payouts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(payouts.id, id))\n      .returning();\n    return updatedPayout;\n  }\n\n  async getPendingPayouts(): Promise<Payout[]> {\n    return await db\n      .select()\n      .from(payouts)\n      .where(eq(payouts.status, 'pending'))\n      .orderBy(desc(payouts.createdAt));\n  }\n\n  async getPayoutsByDriverId(driverId: string): Promise<Payout[]> {\n    return await db\n      .select()\n      .from(payouts)\n      .where(eq(payouts.driverId, driverId))\n      .orderBy(desc(payouts.createdAt));\n  }\n\n  // Incident operations\n  async createIncident(incident: InsertIncident): Promise<Incident> {\n    const [newIncident] = await db.insert(incidents).values(incident).returning();\n    return newIncident;\n  }\n\n  async getAllIncidents(): Promise<Incident[]> {\n    return await db\n      .select()\n      .from(incidents)\n      .orderBy(desc(incidents.reportedAt));\n  }\n\n  // Document operations\n  async createDocument(document: InsertDocument): Promise<Document> {\n    const [newDocument] = await db.insert(documents).values(document).returning();\n    return newDocument;\n  }\n\n  async getDocumentsByEntity(entityId: string, entityType: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(and(eq(documents.entityId, entityId), eq(documents.entityType, entityType)))\n      .orderBy(desc(documents.uploadedAt));\n  }\n\n  // Fuel station operations\n  async createFuelStation(fuelStation: InsertFuelStation): Promise<FuelStation> {\n    const [newFuelStation] = await db.insert(fuelStations).values(fuelStation).returning();\n    return newFuelStation;\n  }\n\n  async getAllFuelStations(): Promise<FuelStation[]> {\n    return await db.select().from(fuelStations).where(eq(fuelStations.isActive, true));\n  }\n\n  async updateFuelStation(id: string, updates: Partial<InsertFuelStation>): Promise<FuelStation> {\n    const [updatedFuelStation] = await db\n      .update(fuelStations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(fuelStations.id, id))\n      .returning();\n    return updatedFuelStation;\n  }\n\n  // Fuel record operations\n  async createFuelRecord(fuelRecord: InsertFuelRecord): Promise<FuelRecord> {\n    const [newFuelRecord] = await db.insert(fuelRecords).values(fuelRecord).returning();\n    return newFuelRecord;\n  }\n\n  async getFuelRecordsByVehicleId(vehicleId: string): Promise<FuelRecord[]> {\n    return await db\n      .select()\n      .from(fuelRecords)\n      .where(eq(fuelRecords.vehicleId, vehicleId))\n      .orderBy(desc(fuelRecords.refuelDate));\n  }\n\n  async getFuelRecordsByDriverId(driverId: string): Promise<FuelRecord[]> {\n    return await db\n      .select()\n      .from(fuelRecords)\n      .where(eq(fuelRecords.driverId, driverId))\n      .orderBy(desc(fuelRecords.refuelDate));\n  }\n\n  async getAllFuelRecords(): Promise<FuelRecord[]> {\n    return await db\n      .select()\n      .from(fuelRecords)\n      .orderBy(desc(fuelRecords.refuelDate));\n  }\n\n  // Driver checklist operations\n  async createDriverChecklist(checklist: InsertDriverChecklist): Promise<DriverChecklist> {\n    const [newChecklist] = await db.insert(driverChecklists).values(checklist).returning();\n    return newChecklist;\n  }\n\n  async getChecklistsByDriverId(driverId: string): Promise<DriverChecklist[]> {\n    return await db\n      .select()\n      .from(driverChecklists)\n      .where(eq(driverChecklists.driverId, driverId))\n      .orderBy(desc(driverChecklists.createdAt));\n  }\n\n  async updateDriverChecklist(id: string, updates: Partial<InsertDriverChecklist>): Promise<DriverChecklist> {\n    const [updatedChecklist] = await db\n      .update(driverChecklists)\n      .set(updates)\n      .where(eq(driverChecklists.id, id))\n      .returning();\n    return updatedChecklist;\n  }\n\n  // Checklist item operations\n  async createChecklistItem(item: InsertChecklistItem): Promise<ChecklistItem> {\n    const [newItem] = await db.insert(checklistItems).values(item).returning();\n    return newItem;\n  }\n\n  async getChecklistItemsByChecklistId(checklistId: string): Promise<ChecklistItem[]> {\n    return await db\n      .select()\n      .from(checklistItems)\n      .where(eq(checklistItems.checklistId, checklistId));\n  }\n\n  async updateChecklistItem(id: string, updates: Partial<InsertChecklistItem>): Promise<ChecklistItem> {\n    const [updatedItem] = await db\n      .update(checklistItems)\n      .set(updates)\n      .where(eq(checklistItems.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  // Maintenance record operations\n  async createMaintenanceRecord(record: InsertMaintenanceRecord): Promise<MaintenanceRecord> {\n    const [newRecord] = await db.insert(maintenanceRecords).values(record).returning();\n    return newRecord;\n  }\n\n  async getMaintenanceRecordsByVehicleId(vehicleId: string): Promise<MaintenanceRecord[]> {\n    return await db\n      .select()\n      .from(maintenanceRecords)\n      .where(eq(maintenanceRecords.vehicleId, vehicleId))\n      .orderBy(desc(maintenanceRecords.createdAt));\n  }\n\n  async getAllMaintenanceRecords(): Promise<MaintenanceRecord[]> {\n    return await db\n      .select()\n      .from(maintenanceRecords)\n      .orderBy(desc(maintenanceRecords.createdAt));\n  }\n\n  async updateMaintenanceRecord(id: string, updates: Partial<InsertMaintenanceRecord>): Promise<MaintenanceRecord> {\n    const [updatedRecord] = await db\n      .update(maintenanceRecords)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(maintenanceRecords.id, id))\n      .returning();\n    return updatedRecord;\n  }\n\n  // Maintenance task operations\n  async createMaintenanceTask(task: InsertMaintenanceTask): Promise<MaintenanceTask> {\n    const [newTask] = await db.insert(maintenanceTasks).values(task).returning();\n    return newTask;\n  }\n\n  async getMaintenanceTasksByRecordId(recordId: string): Promise<MaintenanceTask[]> {\n    return await db\n      .select()\n      .from(maintenanceTasks)\n      .where(eq(maintenanceTasks.maintenanceRecordId, recordId));\n  }\n\n  async updateMaintenanceTask(id: string, updates: Partial<InsertMaintenanceTask>): Promise<MaintenanceTask> {\n    const [updatedTask] = await db\n      .update(maintenanceTasks)\n      .set(updates)\n      .where(eq(maintenanceTasks.id, id))\n      .returning();\n    return updatedTask;\n  }\n\n  // Inventory operations\n  async createInventoryItem(item: InsertInventoryItem): Promise<InventoryItem> {\n    const [newItem] = await db.insert(inventoryItems).values(item).returning();\n    return newItem;\n  }\n\n  async getAllInventoryItems(): Promise<InventoryItem[]> {\n    return await db.select().from(inventoryItems).where(eq(inventoryItems.isActive, true));\n  }\n\n  async updateInventoryItem(id: string, updates: Partial<InsertInventoryItem>): Promise<InventoryItem> {\n    const [updatedItem] = await db\n      .update(inventoryItems)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(inventoryItems.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  async getLowStockItems(): Promise<InventoryItem[]> {\n    return await db\n      .select()\n      .from(inventoryItems)\n      .where(and(\n        eq(inventoryItems.isActive, true),\n        sql`${inventoryItems.currentStock} <= ${inventoryItems.minimumStock}`\n      ));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":16444},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  boolean,\n  integer,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles enum\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'manager', 'driver']);\n\n// Trip status enum\nexport const tripStatusEnum = pgEnum('trip_status', ['pending', 'completed', 'cancelled']);\n\n// Payout status enum\nexport const payoutStatusEnum = pgEnum('payout_status', ['pending', 'approved', 'rejected', 'paid']);\n\n// Vehicle status enum\nexport const vehicleStatusEnum = pgEnum('vehicle_status', ['active', 'maintenance', 'inactive']);\n\n// Fuel record type enum\nexport const fuelRecordTypeEnum = pgEnum('fuel_record_type', ['refuel', 'distribution', 'transfer']);\n\n// Maintenance status enum\nexport const maintenanceStatusEnum = pgEnum('maintenance_status', ['scheduled', 'in_progress', 'completed', 'cancelled']);\n\n// Checklist status enum\nexport const checklistStatusEnum = pgEnum('checklist_status', ['pending', 'completed', 'failed']);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('driver'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Drivers table\nexport const drivers = pgTable(\"drivers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  employeeId: varchar(\"employee_id\").unique().notNull(),\n  phoneNumber: varchar(\"phone_number\"),\n  address: text(\"address\"),\n  licenseNumber: varchar(\"license_number\").unique(),\n  licenseExpiryDate: timestamp(\"license_expiry_date\"),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  emergencyContact: varchar(\"emergency_contact\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Vehicles table\nexport const vehicles = pgTable(\"vehicles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  registrationNumber: varchar(\"registration_number\").unique().notNull(),\n  make: varchar(\"make\").notNull(),\n  model: varchar(\"model\").notNull(),\n  year: integer(\"year\"),\n  capacity: integer(\"capacity\"),\n  fuelType: varchar(\"fuel_type\"),\n  insuranceNumber: varchar(\"insurance_number\"),\n  insuranceExpiryDate: timestamp(\"insurance_expiry_date\"),\n  permitNumber: varchar(\"permit_number\"),\n  permitExpiryDate: timestamp(\"permit_expiry_date\"),\n  status: vehicleStatusEnum(\"status\").default('active'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Driver-Vehicle assignments\nexport const assignments = pgTable(\"assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  driverId: varchar(\"driver_id\").references(() => drivers.id),\n  vehicleId: varchar(\"vehicle_id\").references(() => vehicles.id),\n  assignedAt: timestamp(\"assigned_at\").defaultNow(),\n  unassignedAt: timestamp(\"unassigned_at\"),\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Trips table\nexport const trips = pgTable(\"trips\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  driverId: varchar(\"driver_id\").references(() => drivers.id),\n  vehicleId: varchar(\"vehicle_id\").references(() => vehicles.id),\n  pickupLocation: text(\"pickup_location\").notNull(),\n  dropLocation: text(\"drop_location\").notNull(),\n  distance: decimal(\"distance\", { precision: 10, scale: 2 }),\n  revenue: decimal(\"revenue\", { precision: 10, scale: 2 }).notNull(),\n  startTime: timestamp(\"start_time\"),\n  endTime: timestamp(\"end_time\"),\n  status: tripStatusEnum(\"status\").default('pending'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payouts table\nexport const payouts = pgTable(\"payouts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tripId: varchar(\"trip_id\").references(() => trips.id),\n  driverId: varchar(\"driver_id\").references(() => drivers.id),\n  revenue: decimal(\"revenue\", { precision: 10, scale: 2 }).notNull(),\n  calculatedAmount: decimal(\"calculated_amount\", { precision: 10, scale: 2 }).notNull(),\n  approvedAmount: decimal(\"approved_amount\", { precision: 10, scale: 2 }),\n  status: payoutStatusEnum(\"status\").default('pending'),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Incidents table\nexport const incidents = pgTable(\"incidents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tripId: varchar(\"trip_id\").references(() => trips.id),\n  driverId: varchar(\"driver_id\").references(() => drivers.id),\n  vehicleId: varchar(\"vehicle_id\").references(() => vehicles.id),\n  incidentType: varchar(\"incident_type\").notNull(),\n  description: text(\"description\").notNull(),\n  damageAmount: decimal(\"damage_amount\", { precision: 10, scale: 2 }),\n  reportedAt: timestamp(\"reported_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n  isResolved: boolean(\"is_resolved\").default(false),\n});\n\n// Documents table\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityId: varchar(\"entity_id\").notNull(), // driver_id or vehicle_id\n  entityType: varchar(\"entity_type\").notNull(), // 'driver' or 'vehicle'\n  documentType: varchar(\"document_type\").notNull(),\n  fileName: varchar(\"file_name\").notNull(),\n  filePath: varchar(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\"),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  expiryDate: timestamp(\"expiry_date\"),\n});\n\n// Fuel stations table\nexport const fuelStations = pgTable(\"fuel_stations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  contactPerson: varchar(\"contact_person\"),\n  phone: varchar(\"phone\"),\n  contractDetails: text(\"contract_details\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Fuel records table\nexport const fuelRecords = pgTable(\"fuel_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vehicleId: varchar(\"vehicle_id\").references(() => vehicles.id),\n  driverId: varchar(\"driver_id\").references(() => drivers.id),\n  fuelStationId: varchar(\"fuel_station_id\").references(() => fuelStations.id),\n  recordType: fuelRecordTypeEnum(\"record_type\").notNull(),\n  fuelType: varchar(\"fuel_type\").notNull(),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  pricePerLiter: decimal(\"price_per_liter\", { precision: 10, scale: 2 }).notNull(),\n  totalCost: decimal(\"total_cost\", { precision: 10, scale: 2 }).notNull(),\n  odometerReading: integer(\"odometer_reading\"),\n  receiptNumber: varchar(\"receipt_number\"),\n  notes: text(\"notes\"),\n  refuelDate: timestamp(\"refuel_date\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Driver checklists table\nexport const driverChecklists = pgTable(\"driver_checklists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  driverId: varchar(\"driver_id\").references(() => drivers.id),\n  vehicleId: varchar(\"vehicle_id\").references(() => vehicles.id),\n  checklistType: varchar(\"checklist_type\").notNull(), // 'pre_trip', 'post_trip', 'inventory', 'maintenance'\n  status: checklistStatusEnum(\"status\").default('pending'),\n  completedAt: timestamp(\"completed_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Checklist items table\nexport const checklistItems = pgTable(\"checklist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  checklistId: varchar(\"checklist_id\").references(() => driverChecklists.id),\n  itemName: varchar(\"item_name\").notNull(),\n  itemCategory: varchar(\"item_category\").notNull(), // 'safety', 'inventory', 'maintenance', 'documentation'\n  isChecked: boolean(\"is_checked\").default(false),\n  condition: varchar(\"condition\"), // 'good', 'fair', 'poor', 'needs_attention'\n  quantity: integer(\"quantity\"),\n  notes: text(\"notes\"),\n  imageUrl: varchar(\"image_url\"),\n});\n\n// Maintenance records table\nexport const maintenanceRecords = pgTable(\"maintenance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vehicleId: varchar(\"vehicle_id\").references(() => vehicles.id),\n  maintenanceType: varchar(\"maintenance_type\").notNull(), // 'scheduled', 'repair', 'inspection', 'service'\n  description: text(\"description\").notNull(),\n  status: maintenanceStatusEnum(\"status\").default('scheduled'),\n  scheduledDate: timestamp(\"scheduled_date\"),\n  completedDate: timestamp(\"completed_date\"),\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }),\n  serviceProvider: varchar(\"service_provider\"),\n  odometerReading: integer(\"odometer_reading\"),\n  nextServiceDue: timestamp(\"next_service_due\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Maintenance tasks table\nexport const maintenanceTasks = pgTable(\"maintenance_tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  maintenanceRecordId: varchar(\"maintenance_record_id\").references(() => maintenanceRecords.id),\n  taskName: varchar(\"task_name\").notNull(),\n  description: text(\"description\"),\n  isCompleted: boolean(\"is_completed\").default(false),\n  assignedTo: varchar(\"assigned_to\"),\n  completedBy: varchar(\"completed_by\"),\n  estimatedDuration: integer(\"estimated_duration\"), // in minutes\n  actualDuration: integer(\"actual_duration\"), // in minutes\n  partsUsed: text(\"parts_used\"), // JSON string of parts\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }),\n});\n\n// Inventory items table\nexport const inventoryItems = pgTable(\"inventory_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  itemName: varchar(\"item_name\").notNull(),\n  itemCode: varchar(\"item_code\").unique(),\n  category: varchar(\"category\").notNull(), // 'spare_parts', 'tools', 'safety_equipment', 'consumables'\n  currentStock: integer(\"current_stock\").default(0),\n  minimumStock: integer(\"minimum_stock\").default(0),\n  maxStock: integer(\"max_stock\"),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }),\n  location: varchar(\"location\"),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  driver: one(drivers, {\n    fields: [users.id],\n    references: [drivers.userId],\n  }),\n  approvedPayouts: many(payouts),\n}));\n\nexport const driversRelations = relations(drivers, ({ one, many }) => ({\n  user: one(users, {\n    fields: [drivers.userId],\n    references: [users.id],\n  }),\n  assignments: many(assignments),\n  trips: many(trips),\n  payouts: many(payouts),\n  incidents: many(incidents),\n  documents: many(documents),\n  fuelRecords: many(fuelRecords),\n  driverChecklists: many(driverChecklists),\n}));\n\nexport const vehiclesRelations = relations(vehicles, ({ many }) => ({\n  assignments: many(assignments),\n  trips: many(trips),\n  incidents: many(incidents),\n  documents: many(documents),\n  fuelRecords: many(fuelRecords),\n  maintenanceRecords: many(maintenanceRecords),\n  driverChecklists: many(driverChecklists),\n}));\n\nexport const assignmentsRelations = relations(assignments, ({ one }) => ({\n  driver: one(drivers, {\n    fields: [assignments.driverId],\n    references: [drivers.id],\n  }),\n  vehicle: one(vehicles, {\n    fields: [assignments.vehicleId],\n    references: [vehicles.id],\n  }),\n}));\n\nexport const tripsRelations = relations(trips, ({ one, many }) => ({\n  driver: one(drivers, {\n    fields: [trips.driverId],\n    references: [drivers.id],\n  }),\n  vehicle: one(vehicles, {\n    fields: [trips.vehicleId],\n    references: [vehicles.id],\n  }),\n  payout: one(payouts),\n  incidents: many(incidents),\n}));\n\nexport const payoutsRelations = relations(payouts, ({ one }) => ({\n  trip: one(trips, {\n    fields: [payouts.tripId],\n    references: [trips.id],\n  }),\n  driver: one(drivers, {\n    fields: [payouts.driverId],\n    references: [drivers.id],\n  }),\n  approver: one(users, {\n    fields: [payouts.approvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const incidentsRelations = relations(incidents, ({ one }) => ({\n  trip: one(trips, {\n    fields: [incidents.tripId],\n    references: [trips.id],\n  }),\n  driver: one(drivers, {\n    fields: [incidents.driverId],\n    references: [drivers.id],\n  }),\n  vehicle: one(vehicles, {\n    fields: [incidents.vehicleId],\n    references: [vehicles.id],\n  }),\n}));\n\nexport const fuelStationsRelations = relations(fuelStations, ({ many }) => ({\n  fuelRecords: many(fuelRecords),\n}));\n\nexport const fuelRecordsRelations = relations(fuelRecords, ({ one }) => ({\n  vehicle: one(vehicles, {\n    fields: [fuelRecords.vehicleId],\n    references: [vehicles.id],\n  }),\n  driver: one(drivers, {\n    fields: [fuelRecords.driverId],\n    references: [drivers.id],\n  }),\n  fuelStation: one(fuelStations, {\n    fields: [fuelRecords.fuelStationId],\n    references: [fuelStations.id],\n  }),\n}));\n\nexport const driverChecklistsRelations = relations(driverChecklists, ({ one, many }) => ({\n  driver: one(drivers, {\n    fields: [driverChecklists.driverId],\n    references: [drivers.id],\n  }),\n  vehicle: one(vehicles, {\n    fields: [driverChecklists.vehicleId],\n    references: [vehicles.id],\n  }),\n  checklistItems: many(checklistItems),\n}));\n\nexport const checklistItemsRelations = relations(checklistItems, ({ one }) => ({\n  checklist: one(driverChecklists, {\n    fields: [checklistItems.checklistId],\n    references: [driverChecklists.id],\n  }),\n}));\n\nexport const maintenanceRecordsRelations = relations(maintenanceRecords, ({ one, many }) => ({\n  vehicle: one(vehicles, {\n    fields: [maintenanceRecords.vehicleId],\n    references: [vehicles.id],\n  }),\n  maintenanceTasks: many(maintenanceTasks),\n}));\n\nexport const maintenanceTasksRelations = relations(maintenanceTasks, ({ one }) => ({\n  maintenanceRecord: one(maintenanceRecords, {\n    fields: [maintenanceTasks.maintenanceRecordId],\n    references: [maintenanceRecords.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDriverSchema = createInsertSchema(drivers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertVehicleSchema = createInsertSchema(vehicles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTripSchema = createInsertSchema(trips).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPayoutSchema = createInsertSchema(payouts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAssignmentSchema = createInsertSchema(assignments).omit({\n  id: true,\n});\n\nexport const insertIncidentSchema = createInsertSchema(incidents).omit({\n  id: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertFuelStationSchema = createInsertSchema(fuelStations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFuelRecordSchema = createInsertSchema(fuelRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDriverChecklistSchema = createInsertSchema(driverChecklists).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChecklistItemSchema = createInsertSchema(checklistItems).omit({\n  id: true,\n});\n\nexport const insertMaintenanceRecordSchema = createInsertSchema(maintenanceRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMaintenanceTaskSchema = createInsertSchema(maintenanceTasks).omit({\n  id: true,\n});\n\nexport const insertInventoryItemSchema = createInsertSchema(inventoryItems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Driver = typeof drivers.$inferSelect;\nexport type InsertDriver = z.infer<typeof insertDriverSchema>;\n\nexport type Vehicle = typeof vehicles.$inferSelect;\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\n\nexport type Trip = typeof trips.$inferSelect;\nexport type InsertTrip = z.infer<typeof insertTripSchema>;\n\nexport type Payout = typeof payouts.$inferSelect;\nexport type InsertPayout = z.infer<typeof insertPayoutSchema>;\n\nexport type Assignment = typeof assignments.$inferSelect;\nexport type InsertAssignment = z.infer<typeof insertAssignmentSchema>;\n\nexport type Incident = typeof incidents.$inferSelect;\nexport type InsertIncident = z.infer<typeof insertIncidentSchema>;\n\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\n\nexport type FuelStation = typeof fuelStations.$inferSelect;\nexport type InsertFuelStation = z.infer<typeof insertFuelStationSchema>;\n\nexport type FuelRecord = typeof fuelRecords.$inferSelect;\nexport type InsertFuelRecord = z.infer<typeof insertFuelRecordSchema>;\n\nexport type DriverChecklist = typeof driverChecklists.$inferSelect;\nexport type InsertDriverChecklist = z.infer<typeof insertDriverChecklistSchema>;\n\nexport type ChecklistItem = typeof checklistItems.$inferSelect;\nexport type InsertChecklistItem = z.infer<typeof insertChecklistItemSchema>;\n\nexport type MaintenanceRecord = typeof maintenanceRecords.$inferSelect;\nexport type InsertMaintenanceRecord = z.infer<typeof insertMaintenanceRecordSchema>;\n\nexport type MaintenanceTask = typeof maintenanceTasks.$inferSelect;\nexport type InsertMaintenanceTask = z.infer<typeof insertMaintenanceTaskSchema>;\n\nexport type InventoryItem = typeof inventoryItems.$inferSelect;\nexport type InsertInventoryItem = z.infer<typeof insertInventoryItemSchema>;\n","size_bytes":18898},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Layout } from \"@/components/Layout\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Home from \"@/pages/Home\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          {/* Add more protected routes here as needed */}\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Layout>\n          <Toaster />\n          <Router />\n        </Layout>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1114},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(250, 10%, 98%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(208, 83%, 41%);\n  --primary-dark: hsl(213, 84%, 36%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(208, 83%, 41%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(208, 83%, 41%);\n  --chart-1: hsl(208, 83%, 41%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(208, 83%, 41%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(208, 83%, 41%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(208, 83%, 41%);\n  --font-sans: 'Roboto', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00), 0px 1px 2px -1px hsl(208, 83%, 41% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00), 0px 1px 2px -1px hsl(208, 83%, 41% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00), 0px 2px 4px -1px hsl(208, 83%, 41% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00), 0px 4px 6px -1px hsl(208, 83%, 41% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00), 0px 8px 10px -1px hsl(208, 83%, 41% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  --success: hsl(119, 43%, 53%);\n  --warning: hsl(34, 100%, 50%);\n  --error: hsl(4, 90%, 58%);\n  --surface: hsl(0, 0%, 100%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(208, 83%, 50%);\n  --primary-dark: hsl(213, 84%, 45%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(208, 83%, 50%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(208, 83%, 41%);\n  --chart-1: hsl(208, 83%, 41%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(208, 83%, 41%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(208, 83%, 50%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(208, 83%, 41%);\n  --font-sans: 'Roboto', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00), 0px 1px 2px -1px hsl(208, 83%, 41% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00), 0px 1px 2px -1px hsl(208, 83%, 41% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00), 0px 2px 4px -1px hsl(208, 83%, 41% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00), 0px 4px 6px -1px hsl(208, 83%, 41% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00), 0px 8px 10px -1px hsl(208, 83%, 41% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(208, 83%, 41% / 0.00);\n  --success: hsl(119, 43%, 53%);\n  --warning: hsl(34, 100%, 50%);\n  --error: hsl(4, 90%, 58%);\n  --surface: hsl(228, 9.8039%, 10%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Roboto', sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-primary {\n    color: var(--primary);\n  }\n  \n  .text-primary-dark {\n    color: var(--primary-dark);\n  }\n  \n  .text-success {\n    color: var(--success);\n  }\n  \n  .text-warning {\n    color: var(--warning);\n  }\n  \n  .text-error {\n    color: var(--error);\n  }\n  \n  .bg-primary {\n    background-color: var(--primary);\n  }\n  \n  .bg-primary-dark {\n    background-color: var(--primary-dark);\n  }\n  \n  .bg-success {\n    background-color: var(--success);\n  }\n  \n  .bg-warning {\n    background-color: var(--warning);\n  }\n  \n  .bg-error {\n    background-color: var(--error);\n  }\n  \n  .bg-surface {\n    background-color: var(--surface);\n  }\n  \n  .hover\\:bg-primary:hover {\n    background-color: var(--primary);\n  }\n  \n  .hover\\:bg-primary-dark:hover {\n    background-color: var(--primary-dark);\n  }\n  \n  .hover\\:text-primary:hover {\n    color: var(--primary);\n  }\n}\n","size_bytes":5867},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminDashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface DashboardStats {\n  activeDrivers: number;\n  fleetSize: number;\n  dailyRevenue: number;\n  pendingPayouts: number;\n}\n\nexport function AdminDashboard() {\n  const { toast } = useToast();\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  const { data: trips, isLoading: tripsLoading } = useQuery({\n    queryKey: [\"/api/trips\"],\n    retry: false,\n    meta: {\n      onError: (error: Error) => {\n        if (isUnauthorizedError(error)) {\n          toast({\n            title: \"Unauthorized\",\n            description: \"You are logged out. Logging in again...\",\n            variant: \"destructive\",\n          });\n          setTimeout(() => {\n            window.location.href = \"/api/login\";\n          }, 500);\n        }\n      },\n    },\n  });\n\n  if (statsLoading || tripsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-semibold text-gray-900 mb-2\">Fleet Management Overview</h1>\n          <p className=\"text-gray-600\">Monitor your fleet operations and performance metrics</p>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-16 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const recentTrips = trips?.slice(0, 5) || [];\n\n  return (\n    <div>\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 mb-2\">Fleet Management Overview</h1>\n        <p className=\"text-gray-600\">Monitor your fleet operations and performance metrics</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Active Drivers</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-active-drivers\">\n                  {stats?.activeDrivers || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-users text-primary text-xl\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-success\">+12%</span>\n              <span className=\"text-gray-500 ml-2\">from last month</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Fleet Size</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-fleet-size\">\n                  {stats?.fleetSize || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-car text-success text-xl\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-success\">+2</span>\n              <span className=\"text-gray-500 ml-2\">new vehicles</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Daily Revenue</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-daily-revenue\">\n                  ₹{stats?.dailyRevenue?.toLocaleString() || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-rupee-sign text-warning text-xl\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-success\">+8%</span>\n              <span className=\"text-gray-500 ml-2\">vs yesterday</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Pending Payouts</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-pending-payouts\">\n                  ₹{stats?.pendingPayouts?.toLocaleString() || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-exclamation-circle text-error text-xl\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-gray-500\">requiring approval</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity and Quick Actions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        {/* Recent Trips */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Recent Trips</h3>\n            </div>\n            <div className=\"overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Driver\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Route\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Revenue\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Status\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {recentTrips.length === 0 ? (\n                      <tr>\n                        <td colSpan={4} className=\"px-6 py-8 text-center text-gray-500\">\n                          No trips found\n                        </td>\n                      </tr>\n                    ) : (\n                      recentTrips.map((trip: any, index: number) => (\n                        <tr key={trip.id} data-testid={`trip-row-${index}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                                D{index + 1}\n                              </div>\n                              <div className=\"ml-3\">\n                                <div className=\"text-sm font-medium text-gray-900\">Driver {index + 1}</div>\n                                <div className=\"text-sm text-gray-500\">Vehicle Info</div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm text-gray-900\">\n                              {trip.pickupLocation} → {trip.dropLocation}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {new Date(trip.createdAt).toLocaleDateString()}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            ₹{parseFloat(trip.revenue).toLocaleString()}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                              trip.status === 'completed' \n                                ? 'bg-green-100 text-success' \n                                : 'bg-yellow-100 text-warning'\n                            }`}>\n                              {trip.status}\n                            </span>\n                          </td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h3>\n            <div className=\"space-y-3\">\n              <Button \n                variant=\"outline\" \n                className=\"w-full justify-start\" \n                data-testid=\"action-add-driver\"\n              >\n                <i className=\"fas fa-user-plus mr-3 text-primary\"></i>\n                Add New Driver\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"w-full justify-start\" \n                data-testid=\"action-register-vehicle\"\n              >\n                <i className=\"fas fa-plus-circle mr-3 text-primary\"></i>\n                Register Vehicle\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"w-full justify-start\" \n                data-testid=\"action-generate-report\"\n              >\n                <i className=\"fas fa-chart-bar mr-3 text-primary\"></i>\n                Generate Report\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"w-full justify-start\" \n                data-testid=\"action-approve-payouts\"\n              >\n                <i className=\"fas fa-check-circle mr-3 text-primary\"></i>\n                Approve Payouts\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11224},"client/src/components/DriverChecklist.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertDriverChecklistSchema, type InsertDriverChecklist } from \"@shared/schema\";\nimport { ClipboardList, Plus, Check, X, Clock } from \"lucide-react\";\n\ninterface ChecklistItemType {\n  id: string;\n  item: string;\n  isCompleted: boolean;\n  notes?: string;\n}\n\nexport function DriverChecklist() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [checklistType, setChecklistType] = useState<string>(\"\");\n  const [items, setItems] = useState<ChecklistItemType[]>([]);\n\n  const { data: checklists, isLoading: checklistsLoading } = useQuery({\n    queryKey: [\"/api/checklists\"],\n    retry: false,\n  });\n\n  const createChecklistMutation = useMutation({\n    mutationFn: async (data: InsertDriverChecklist) => {\n      await apiRequest(\"/api/checklists\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Checklist created successfully\",\n      });\n      setChecklistType(\"\");\n      setItems([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/checklists\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create checklist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateChecklistMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<InsertDriverChecklist> }) => {\n      await apiRequest(`/api/checklists/${id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify(updates),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Checklist updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/checklists\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update checklist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getDefaultItems = (type: string): ChecklistItemType[] => {\n    const itemsMap: Record<string, string[]> = {\n      \"pre-trip\": [\n        \"Check engine oil level\",\n        \"Inspect tire pressure and condition\",\n        \"Test brakes functionality\",\n        \"Check fuel level\",\n        \"Verify lights and indicators\",\n        \"Inspect windshield and mirrors\",\n        \"Check vehicle documents\",\n        \"Ensure emergency kit is present\"\n      ],\n      \"post-trip\": [\n        \"Record odometer reading\",\n        \"Note any damage or issues\",\n        \"Check fuel consumption\",\n        \"Clean interior\",\n        \"Secure vehicle\",\n        \"Submit trip report\"\n      ],\n      \"maintenance\": [\n        \"Check battery condition\",\n        \"Inspect belts and hoses\",\n        \"Test air conditioning\",\n        \"Check coolant level\",\n        \"Inspect suspension\",\n        \"Test steering alignment\",\n        \"Check exhaust system\"\n      ],\n      \"safety\": [\n        \"Ensure seat belts work properly\",\n        \"Test emergency brake\",\n        \"Check first aid kit\",\n        \"Verify fire extinguisher\",\n        \"Inspect safety triangles\",\n        \"Test horn functionality\"\n      ]\n    };\n\n    return (itemsMap[type] || []).map((item, index) => ({\n      id: `${type}-${index}`,\n      item,\n      isCompleted: false,\n    }));\n  };\n\n  const handleChecklistTypeChange = (type: string) => {\n    setChecklistType(type);\n    setItems(getDefaultItems(type));\n  };\n\n  const toggleItem = (itemId: string) => {\n    setItems(prev => prev.map(item => \n      item.id === itemId \n        ? { ...item, isCompleted: !item.isCompleted }\n        : item\n    ));\n  };\n\n  const handleCreateChecklist = () => {\n    if (!checklistType) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a checklist type\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data: InsertDriverChecklist = {\n      type: checklistType,\n      status: \"in_progress\",\n      items: items.map(item => ({\n        item: item.item,\n        isCompleted: item.isCompleted,\n        notes: item.notes\n      })),\n    };\n\n    createChecklistMutation.mutate(data);\n  };\n\n  const handleCompleteChecklist = (checklistId: string) => {\n    updateChecklistMutation.mutate({\n      id: checklistId,\n      updates: { status: \"completed\" }\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      \"in_progress\": { color: \"bg-yellow-500\", label: \"In Progress\", icon: Clock },\n      \"completed\": { color: \"bg-green-500\", label: \"Completed\", icon: Check },\n      \"cancelled\": { color: \"bg-red-500\", label: \"Cancelled\", icon: X },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.in_progress;\n    const Icon = config.icon;\n\n    return (\n      <Badge className={`${config.color} text-white`}>\n        <Icon className=\"h-3 w-3 mr-1\" />\n        {config.label}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Create New Checklist */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Plus className=\"h-5 w-5\" />\n            Create New Checklist\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"checklist-type\">Checklist Type</Label>\n            <Select value={checklistType} onValueChange={handleChecklistTypeChange}>\n              <SelectTrigger data-testid=\"select-checklist-type\">\n                <SelectValue placeholder=\"Select checklist type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"pre-trip\">Pre-Trip Inspection</SelectItem>\n                <SelectItem value=\"post-trip\">Post-Trip Inspection</SelectItem>\n                <SelectItem value=\"maintenance\">Maintenance Check</SelectItem>\n                <SelectItem value=\"safety\">Safety Inspection</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {items.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label>Checklist Items</Label>\n              <div className=\"space-y-2 max-h-64 overflow-y-auto border rounded-md p-3\">\n                {items.map((item) => (\n                  <div key={item.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={item.id}\n                      checked={item.isCompleted}\n                      onCheckedChange={() => toggleItem(item.id)}\n                      data-testid={`checkbox-${item.id}`}\n                    />\n                    <Label\n                      htmlFor={item.id}\n                      className={`flex-1 text-sm ${item.isCompleted ? 'line-through text-gray-500' : ''}`}\n                    >\n                      {item.item}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <Button\n            onClick={handleCreateChecklist}\n            disabled={!checklistType || createChecklistMutation.isPending}\n            className=\"w-full\"\n            data-testid=\"button-create-checklist\"\n          >\n            {createChecklistMutation.isPending ? \"Creating...\" : \"Create Checklist\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Recent Checklists */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <ClipboardList className=\"h-5 w-5\" />\n            Recent Checklists\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {checklistsLoading ? (\n            <div className=\"animate-pulse space-y-2\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          ) : (checklists || []).length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8\">\n              No checklists found. Create your first checklist above!\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {(checklists || []).slice(0, 5).map((checklist: any) => (\n                <div key={checklist.id} className=\"border rounded-lg p-4\" data-testid={`checklist-${checklist.id}`}>\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div>\n                      <h4 className=\"font-medium capitalize\">\n                        {checklist.type.replace('-', ' ')} Checklist\n                      </h4>\n                      <p className=\"text-sm text-gray-500\">\n                        {new Date(checklist.createdAt).toLocaleDateString()} at{\" \"}\n                        {new Date(checklist.createdAt).toLocaleTimeString([], { \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}\n                      </p>\n                    </div>\n                    <div className=\"flex flex-col items-end gap-2\">\n                      {getStatusBadge(checklist.status)}\n                      {checklist.status === 'in_progress' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleCompleteChecklist(checklist.id)}\n                          disabled={updateChecklistMutation.isPending}\n                          data-testid={`button-complete-${checklist.id}`}\n                        >\n                          <Check className=\"h-3 w-3 mr-1\" />\n                          Complete\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {checklist.items && checklist.items.length > 0 && (\n                    <div className=\"text-sm text-gray-600\">\n                      Completed: {checklist.items.filter((item: any) => item.isCompleted).length} / {checklist.items.length} items\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10686},"client/src/components/DriverDashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { TripLogForm } from \"./TripLogForm\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { User } from \"@shared/schema\";\nimport { Fuel, ClipboardList, Car, DollarSign, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface DriverDashboardProps {\n  user: User;\n}\n\nexport function DriverDashboard({ user }: DriverDashboardProps) {\n  const { toast } = useToast();\n  const [showTripForm, setShowTripForm] = useState(false);\n  const [showFuelForm, setShowFuelForm] = useState(false);\n  const [activeTab, setActiveTab] = useState<'overview' | 'checklists' | 'fuel'>('overview');\n\n  const { data: trips, isLoading: tripsLoading } = useQuery({\n    queryKey: [\"/api/trips\"],\n    retry: false,\n    meta: {\n      onError: (error: Error) => {\n        if (isUnauthorizedError(error)) {\n          toast({\n            title: \"Unauthorized\",\n            description: \"You are logged out. Logging in again...\",\n            variant: \"destructive\",\n          });\n          setTimeout(() => {\n            window.location.href = \"/api/login\";\n          }, 500);\n        }\n      },\n    },\n  });\n\n  const { data: payouts, isLoading: payoutsLoading } = useQuery({\n    queryKey: [\"/api/payouts\"],\n    retry: false,\n  });\n\n  const { data: fuelRecords, isLoading: fuelRecordsLoading } = useQuery({\n    queryKey: [\"/api/fuel-records\"],\n    retry: false,\n  });\n\n  const { data: checklists, isLoading: checklistsLoading } = useQuery({\n    queryKey: [\"/api/checklists\"],\n    retry: false,\n  });\n\n  // Calculate today's earnings\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const todayTrips = (trips || []).filter((trip: any) => \n    new Date(trip.createdAt) >= today\n  );\n  \n  const todayPayouts = (payouts || []).filter((payout: any) => {\n    const payoutDate = new Date(payout.createdAt);\n    payoutDate.setHours(0, 0, 0, 0);\n    return payoutDate >= today;\n  });\n\n  const todayEarnings = todayPayouts.reduce((sum: number, payout: any) => \n    sum + parseFloat(payout.calculatedAmount), 0\n  );\n\n  const target = 2000;\n  const progressPercent = Math.min((todayEarnings / target) * 100, 100);\n\n  const getInitials = (firstName?: string | null, lastName?: string | null) => {\n    const first = firstName || \"\";\n    const last = lastName || \"\";\n    return (first.charAt(0) + last.charAt(0)).toUpperCase() || \"D\";\n  };\n\n  const getDisplayName = (firstName?: string | null, lastName?: string | null) => {\n    if (firstName && lastName) {\n      return `${firstName} ${lastName}`;\n    }\n    return user.email || \"Driver\";\n  };\n\n  if (tripsLoading || payoutsLoading || fuelRecordsLoading || checklistsLoading) {\n    return (\n      <div className=\"max-w-md mx-auto lg:max-w-none space-y-6\">\n        {[...Array(3)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-16 bg-gray-200 rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const recentTrips = (trips || []).slice(0, 5);\n\n  return (\n    <div className=\"max-w-md mx-auto lg:max-w-none\">\n      {/* Driver Info Header */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center text-white text-xl font-semibold\">\n              {getInitials(user.firstName, user.lastName)}\n            </div>\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900\" data-testid=\"driver-name\">\n                {getDisplayName(user.firstName, user.lastName)}\n              </h2>\n              <p className=\"text-gray-600\">Driver ID: {user.id.slice(0, 8)}</p>\n              <p className=\"text-sm text-success\">On Duty</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Today's Earnings */}\n      <div className=\"bg-gradient-to-r from-primary to-primary-dark rounded-lg text-white p-6 mb-6\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-medium mb-2\">Today's Earnings</h3>\n          <div className=\"text-3xl font-bold mb-2\" data-testid=\"today-earnings\">\n            ₹{todayEarnings.toLocaleString()}\n          </div>\n          <div className=\"text-sm opacity-90\">\n            Target: <span data-testid=\"target-earnings\">₹{target.toLocaleString()}</span> • \n            Progress: <span data-testid=\"progress-percent\">{Math.round(progressPercent)}%</span>\n          </div>\n          <div className=\"w-full bg-blue-400 rounded-full h-2 mt-3\">\n            <div \n              className=\"bg-white h-2 rounded-full transition-all duration-500\" \n              style={{ width: `${progressPercent}%` }}\n            ></div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-lg mb-6\">\n        <Button\n          variant={activeTab === 'overview' ? 'default' : 'ghost'}\n          onClick={() => setActiveTab('overview')}\n          className=\"flex-1\"\n          data-testid=\"tab-overview\"\n        >\n          <Car className=\"h-4 w-4 mr-2\" />\n          Overview\n        </Button>\n        <Button\n          variant={activeTab === 'fuel' ? 'default' : 'ghost'}\n          onClick={() => setActiveTab('fuel')}\n          className=\"flex-1\"\n          data-testid=\"tab-fuel\"\n        >\n          <Fuel className=\"h-4 w-4 mr-2\" />\n          Fuel\n        </Button>\n        <Button\n          variant={activeTab === 'checklists' ? 'default' : 'ghost'}\n          onClick={() => setActiveTab('checklists')}\n          className=\"flex-1\"\n          data-testid=\"tab-checklists\"\n        >\n          <ClipboardList className=\"h-4 w-4 mr-2\" />\n          Checklists\n        </Button>\n      </div>\n\n      {/* Trip Logging Form */}\n      <div id=\"trip-form\">\n        <TripLogForm />\n      </div>\n\n      {/* Recent Trips */}\n      <Card className=\"mt-6\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">My Recent Trips</h3>\n        </div>\n        <div className=\"divide-y divide-gray-200\">\n          {recentTrips.length === 0 ? (\n            <div className=\"p-8 text-center text-gray-500\">\n              No trips logged yet. Start by logging your first trip above!\n            </div>\n          ) : (\n            recentTrips.map((trip: any, index: number) => {\n              const matchingPayout = (payouts || []).find((payout: any) => payout.tripId === trip.id);\n              \n              return (\n                <div key={trip.id} className=\"p-4\" data-testid={`trip-${index}`}>\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-gray-900\">\n                        {trip.pickupLocation} → {trip.dropLocation}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {new Date(trip.createdAt).toLocaleDateString()} at{\" \"}\n                        {new Date(trip.createdAt).toLocaleTimeString([], { \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold text-gray-900\">\n                        ₹{matchingPayout ? parseFloat(matchingPayout.calculatedAmount).toLocaleString() : 'Calculating...'}\n                      </div>\n                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                        matchingPayout?.status === 'approved' \n                          ? 'bg-green-100 text-success'\n                          : matchingPayout?.status === 'rejected'\n                          ? 'bg-red-100 text-error'\n                          : 'bg-yellow-100 text-warning'\n                      }`}>\n                        {matchingPayout?.status || 'Pending'}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    Revenue: ₹{parseFloat(trip.revenue).toLocaleString()}\n                    {trip.distance && ` • Distance: ${trip.distance} km`}\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8716},"client/src/components/FuelRecordForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertFuelRecordSchema, type InsertFuelRecord } from \"@shared/schema\";\nimport { Fuel } from \"lucide-react\";\n\nexport function FuelRecordForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: fuelStations, isLoading: stationsLoading } = useQuery({\n    queryKey: [\"/api/fuel-stations\"],\n    retry: false,\n  });\n\n  const form = useForm<InsertFuelRecord>({\n    resolver: zodResolver(insertFuelRecordSchema.omit({ driverId: true, vehicleId: true, createdAt: true })),\n    defaultValues: {\n      refuelDate: new Date(),\n      fuelType: \"petrol\",\n      recordType: \"refuel\",\n      quantity: \"0\",\n      pricePerLiter: \"0\",\n      totalCost: \"0\",\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: InsertFuelRecord) => {\n      await apiRequest(\"/api/fuel-records\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Fuel record logged successfully\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/fuel-records\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to log fuel record\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertFuelRecord) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Fuel className=\"h-5 w-5\" />\n          Log Fuel Record\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"fuelStationId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Fuel Station</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-fuel-station\">\n                        <SelectValue placeholder=\"Select fuel station\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {stationsLoading ? (\n                        <SelectItem value=\"loading\">Loading stations...</SelectItem>\n                      ) : (\n                        (fuelStations || []).map((station: any) => (\n                          <SelectItem key={station.id} value={station.id}>\n                            {station.name} - {station.location}\n                          </SelectItem>\n                        ))\n                      )}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"fuelType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fuel Type</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-fuel-type\">\n                          <SelectValue placeholder=\"Select fuel type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"petrol\">Petrol</SelectItem>\n                        <SelectItem value=\"diesel\">Diesel</SelectItem>\n                        <SelectItem value=\"cng\">CNG</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"refuelDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Refuel Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-refuel-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"quantity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quantity (Liters)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                        onChange={(e) => field.onChange(e.target.value || \"\")}\n                        data-testid=\"input-quantity\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"pricePerLiter\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Price per Liter (₹)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                        onChange={(e) => field.onChange(e.target.value || \"\")}\n                        data-testid=\"input-price-per-liter\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"totalCost\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Total Cost (₹)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.value ? parseFloat(e.target.value) : undefined)}\n                      data-testid=\"input-total-cost\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"odometerReading\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Odometer Reading (km)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"0\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                      data-testid=\"input-odometer\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={mutation.isPending}\n              data-testid=\"button-submit-fuel-record\"\n            >\n              {mutation.isPending ? \"Logging...\" : \"Log Fuel Record\"}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8577},"client/src/components/Layout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { NavigationBar } from \"./NavigationBar\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useState } from \"react\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const { user } = useAuth();\n  const isMobile = useIsMobile();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  if (!user) {\n    return <div>{children}</div>;\n  }\n\n  const showSidebar = user.role !== 'driver' && !isMobile;\n  const showMobileNav = user.role === 'driver' && isMobile;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <NavigationBar \n        user={user} \n        onMenuClick={() => setSidebarOpen(!sidebarOpen)}\n        showMenuButton={!showSidebar}\n      />\n      \n      <div className=\"flex\">\n        {showSidebar && (\n          <Sidebar userRole={user.role} />\n        )}\n        \n        {!showSidebar && sidebarOpen && (\n          <div className=\"fixed inset-0 z-50 lg:hidden\">\n            <div \n              className=\"fixed inset-0 bg-black bg-opacity-50\" \n              onClick={() => setSidebarOpen(false)}\n            />\n            <div className=\"fixed left-0 top-16 h-full w-64 bg-surface\">\n              <Sidebar userRole={user.role} />\n            </div>\n          </div>\n        )}\n        \n        <main className={`flex-1 p-4 lg:p-6 max-w-full overflow-x-hidden ${showMobileNav ? 'pb-20' : ''}`}>\n          {children}\n        </main>\n      </div>\n\n      {showMobileNav && (\n        <nav className=\"fixed bottom-0 left-0 right-0 bg-surface border-t border-gray-200 px-4 py-2 z-40\">\n          <div className=\"flex justify-around\">\n            <button className=\"flex flex-col items-center p-2 text-primary\" data-testid=\"nav-home\">\n              <i className=\"fas fa-home text-lg\"></i>\n              <span className=\"text-xs mt-1\">Home</span>\n            </button>\n            <button className=\"flex flex-col items-center p-2 text-gray-600\" data-testid=\"nav-trips\">\n              <i className=\"fas fa-route text-lg\"></i>\n              <span className=\"text-xs mt-1\">Trips</span>\n            </button>\n            <button className=\"flex flex-col items-center p-2 text-gray-600\" data-testid=\"nav-earnings\">\n              <i className=\"fas fa-money-bill-wave text-lg\"></i>\n              <span className=\"text-xs mt-1\">Earnings</span>\n            </button>\n            <button className=\"flex flex-col items-center p-2 text-gray-600\" data-testid=\"nav-profile\">\n              <i className=\"fas fa-user text-lg\"></i>\n              <span className=\"text-xs mt-1\">Profile</span>\n            </button>\n          </div>\n        </nav>\n      )}\n    </div>\n  );\n}\n","size_bytes":2736},"client/src/components/ManagerDashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function ManagerDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: pendingPayouts, isLoading } = useQuery({\n    queryKey: [\"/api/payouts\"],\n    retry: false,\n    meta: {\n      onError: (error: Error) => {\n        if (isUnauthorizedError(error)) {\n          toast({\n            title: \"Unauthorized\",\n            description: \"You are logged out. Logging in again...\",\n            variant: \"destructive\",\n          });\n          setTimeout(() => {\n            window.location.href = \"/api/login\";\n          }, 500);\n        }\n      },\n    },\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async ({ payoutId }: { payoutId: string }) => {\n      await apiRequest(\"PATCH\", `/api/payouts/${payoutId}/approve`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payouts\"] });\n      toast({\n        title: \"Success\",\n        description: \"Payout approved successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve payout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async ({ payoutId, notes }: { payoutId: string; notes: string }) => {\n      await apiRequest(\"PATCH\", `/api/payouts/${payoutId}/reject`, { notes });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payouts\"] });\n      toast({\n        title: \"Success\",\n        description: \"Payout rejected\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject payout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprove = (payoutId: string) => {\n    approveMutation.mutate({ payoutId });\n  };\n\n  const handleReject = (payoutId: string) => {\n    const notes = prompt(\"Enter rejection reason (optional):\");\n    rejectMutation.mutate({ payoutId, notes: notes || \"\" });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-semibold text-gray-900 mb-2\">Operations Management</h1>\n          <p className=\"text-gray-600\">Monitor daily operations and manage driver performance</p>\n        </div>\n        <Card className=\"animate-pulse\">\n          <CardContent className=\"p-6\">\n            <div className=\"h-32 bg-gray-200 rounded\"></div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const pendingPayoutsList = pendingPayouts?.filter((payout: any) => payout.status === 'pending') || [];\n\n  return (\n    <div>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 mb-2\">Operations Management</h1>\n        <p className=\"text-gray-600\">Monitor daily operations and manage driver performance</p>\n      </div>\n\n      {/* Payout Approval Section */}\n      <Card className=\"mb-6\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Pending Payout Approvals</h3>\n        </div>\n        <CardContent className=\"p-6\">\n          {pendingPayoutsList.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              No pending payouts for approval\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {pendingPayoutsList.map((payout: any, index: number) => (\n                <div \n                  key={payout.id} \n                  className=\"flex items-center justify-between p-4 bg-yellow-50 border border-yellow-200 rounded-lg\"\n                  data-testid={`payout-${index}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white font-medium\">\n                      D{index + 1}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-900\">Driver {index + 1}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        Trip Revenue: <span>₹{parseFloat(payout.revenue).toLocaleString()}</span> • \n                        Calculated Payout: <span>₹{parseFloat(payout.calculatedAmount).toLocaleString()}</span>\n                      </div>\n                      <div className=\"text-xs text-gray-400\">\n                        Formula: min({payout.revenue}, 2250) × 0.30 + max({payout.revenue} - 2250, 0) × 0.70 = ₹{parseFloat(payout.calculatedAmount).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={() => handleApprove(payout.id)}\n                      disabled={approveMutation.isPending}\n                      className=\"bg-success hover:bg-green-600 text-white\"\n                      data-testid={`approve-payout-${index}`}\n                    >\n                      <i className=\"fas fa-check mr-1\"></i>\n                      Approve\n                    </Button>\n                    <Button\n                      onClick={() => handleReject(payout.id)}\n                      disabled={rejectMutation.isPending}\n                      variant=\"destructive\"\n                      data-testid={`reject-payout-${index}`}\n                    >\n                      <i className=\"fas fa-times mr-1\"></i>\n                      Reject\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Performance Metrics */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Top Performers This Week</h3>\n            <div className=\"space-y-4\">\n              <div className=\"text-center py-8 text-gray-500\">\n                Performance data will be available once drivers start logging trips\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Fleet Utilization</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-700\">Active Vehicles</span>\n                <span className=\"text-sm font-semibold text-gray-900\">-/-</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div className=\"bg-success h-2 rounded-full\" style={{ width: \"0%\" }}></div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-700\">Maintenance Due</span>\n                <span className=\"text-sm font-semibold text-warning\">0 vehicles</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8181},"client/src/components/NavigationBar.tsx":{"content":"import { User } from \"@shared/schema\";\n\ninterface NavigationBarProps {\n  user: User;\n  onMenuClick: () => void;\n  showMenuButton: boolean;\n}\n\nexport function NavigationBar({ user, onMenuClick, showMenuButton }: NavigationBarProps) {\n  const getInitials = (firstName?: string, lastName?: string) => {\n    const first = firstName || \"\";\n    const last = lastName || \"\";\n    return (first.charAt(0) + last.charAt(0)).toUpperCase() || \"U\";\n  };\n\n  const getDisplayName = (firstName?: string, lastName?: string) => {\n    if (firstName && lastName) {\n      return `${firstName} ${lastName}`;\n    }\n    return user.email || \"User\";\n  };\n\n  return (\n    <nav className=\"bg-surface shadow-md border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            {showMenuButton && (\n              <button\n                onClick={onMenuClick}\n                className=\"text-gray-600 hover:text-primary lg:hidden\"\n                data-testid=\"menu-button\"\n              >\n                <i className=\"fas fa-bars text-lg\"></i>\n              </button>\n            )}\n            <div className=\"text-xl font-semibold text-primary\">\n              <i className=\"fas fa-bus mr-2\"></i>\n              PLS Travels\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Notifications */}\n            <button className=\"relative p-2 text-gray-600 hover:text-primary\" data-testid=\"notifications\">\n              <i className=\"fas fa-bell text-lg\"></i>\n              <span className=\"absolute -top-1 -right-1 bg-error text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n                3\n              </span>\n            </button>\n            \n            {/* User Menu */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                {getInitials(user.firstName, user.lastName)}\n              </div>\n              <div className=\"hidden md:flex flex-col\">\n                <span className=\"text-sm font-medium text-gray-700\">\n                  {getDisplayName(user.firstName, user.lastName)}\n                </span>\n                <span className=\"text-xs text-gray-500 capitalize\">{user.role}</span>\n              </div>\n              <button \n                onClick={() => window.location.href = '/api/logout'}\n                className=\"ml-2 text-sm text-gray-600 hover:text-primary\"\n                data-testid=\"logout-button\"\n              >\n                <i className=\"fas fa-sign-out-alt\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2891},"client/src/components/Sidebar.tsx":{"content":"interface SidebarProps {\n  userRole: string;\n}\n\nexport function Sidebar({ userRole }: SidebarProps) {\n  const adminNavItems = [\n    { icon: \"fas fa-tachometer-alt\", label: \"Overview\", href: \"/\" },\n    { icon: \"fas fa-users\", label: \"Drivers\", href: \"/drivers\" },\n    { icon: \"fas fa-car\", label: \"Vehicles\", href: \"/vehicles\" },\n    { icon: \"fas fa-route\", label: \"Trips\", href: \"/trips\" },\n    { icon: \"fas fa-money-bill-wave\", label: \"Payouts\", href: \"/payouts\" },\n    { icon: \"fas fa-exclamation-triangle\", label: \"Incidents\", href: \"/incidents\" },\n    { icon: \"fas fa-chart-line\", label: \"Reports\", href: \"/reports\" },\n    { icon: \"fas fa-cog\", label: \"Settings\", href: \"/settings\" },\n  ];\n\n  const managerNavItems = [\n    { icon: \"fas fa-tachometer-alt\", label: \"Operations\", href: \"/\" },\n    { icon: \"fas fa-users\", label: \"Drivers\", href: \"/drivers\" },\n    { icon: \"fas fa-route\", label: \"Trips\", href: \"/trips\" },\n    { icon: \"fas fa-money-bill-wave\", label: \"Payouts\", href: \"/payouts\" },\n    { icon: \"fas fa-exclamation-triangle\", label: \"Incidents\", href: \"/incidents\" },\n    { icon: \"fas fa-chart-line\", label: \"Reports\", href: \"/reports\" },\n  ];\n\n  const navItems = userRole === 'admin' ? adminNavItems : managerNavItems;\n  const dashboardTitle = userRole === 'admin' ? 'Admin Dashboard' : 'Manager Dashboard';\n\n  return (\n    <aside className=\"w-64 bg-surface min-h-screen shadow-sm border-r border-gray-200\">\n      <div className=\"p-4\">\n        <nav className=\"space-y-2\">\n          <div className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3\">\n            {dashboardTitle}\n          </div>\n          {navItems.map((item, index) => (\n            <a\n              key={item.href}\n              href={item.href}\n              className={`flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${\n                index === 0\n                  ? \"text-primary bg-blue-50\"\n                  : \"text-gray-700 hover:text-primary hover:bg-gray-50\"\n              }`}\n              data-testid={`nav-${item.label.toLowerCase()}`}\n            >\n              <i className={`${item.icon} mr-3 text-sm`}></i>\n              {item.label}\n            </a>\n          ))}\n        </nav>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2261},"client/src/components/TripLogForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport function TripLogForm() {\n  const [formData, setFormData] = useState({\n    pickupLocation: \"\",\n    dropLocation: \"\",\n    revenue: \"\",\n    distance: \"\",\n  });\n  const [calculatedPayout, setCalculatedPayout] = useState<number>(0);\n  const [payoutFormula, setPayoutFormula] = useState<string>(\"\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Real-time payout calculation\n  const { mutate: calculatePayout } = useMutation({\n    mutationFn: async (revenue: number) => {\n      const response = await apiRequest(\"POST\", \"/api/calculate-payout\", { revenue });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCalculatedPayout(data.payout);\n      setPayoutFormula(data.formula);\n    },\n    onError: () => {\n      setCalculatedPayout(0);\n      setPayoutFormula(\"\");\n    },\n  });\n\n  const tripMutation = useMutation({\n    mutationFn: async (tripData: any) => {\n      await apiRequest(\"POST\", \"/api/trips\", tripData);\n    },\n    onSuccess: () => {\n      // Reset form\n      setFormData({\n        pickupLocation: \"\",\n        dropLocation: \"\",\n        revenue: \"\",\n        distance: \"\",\n      });\n      setCalculatedPayout(0);\n      setPayoutFormula(\"\");\n      \n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/trips\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/payouts\"] });\n      \n      toast({\n        title: \"Success\",\n        description: \"Trip logged successfully! Your payout is being processed.\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to log trip. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Calculate payout in real-time when revenue changes\n    if (field === \"revenue\" && value) {\n      const revenue = parseFloat(value);\n      if (!isNaN(revenue) && revenue > 0) {\n        calculatePayout(revenue);\n      } else {\n        setCalculatedPayout(0);\n        setPayoutFormula(\"\");\n      }\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.pickupLocation || !formData.dropLocation || !formData.revenue) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in pickup location, drop location, and revenue.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const revenue = parseFloat(formData.revenue);\n    if (isNaN(revenue) || revenue <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid revenue amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    tripMutation.mutate({\n      pickupLocation: formData.pickupLocation,\n      dropLocation: formData.dropLocation,\n      revenue: revenue.toString(),\n      distance: formData.distance ? parseFloat(formData.distance).toString() : null,\n    });\n  };\n\n  return (\n    <Card>\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Log New Trip</h3>\n      </div>\n      <CardContent className=\"p-6\">\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 gap-4\">\n            <div>\n              <Label htmlFor=\"pickupLocation\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Pickup Location\n              </Label>\n              <Input\n                id=\"pickupLocation\"\n                type=\"text\"\n                placeholder=\"Enter pickup location\"\n                value={formData.pickupLocation}\n                onChange={(e) => handleInputChange(\"pickupLocation\", e.target.value)}\n                className=\"text-base\"\n                data-testid=\"input-pickup-location\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"dropLocation\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Drop Location\n              </Label>\n              <Input\n                id=\"dropLocation\"\n                type=\"text\"\n                placeholder=\"Enter drop location\"\n                value={formData.dropLocation}\n                onChange={(e) => handleInputChange(\"dropLocation\", e.target.value)}\n                className=\"text-base\"\n                data-testid=\"input-drop-location\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"revenue\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Trip Revenue (₹)\n              </Label>\n              <Input\n                id=\"revenue\"\n                type=\"number\"\n                placeholder=\"Enter trip revenue\"\n                value={formData.revenue}\n                onChange={(e) => handleInputChange(\"revenue\", e.target.value)}\n                className=\"text-base\"\n                min=\"0\"\n                step=\"0.01\"\n                data-testid=\"input-revenue\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"distance\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Distance (km) - Optional\n              </Label>\n              <Input\n                id=\"distance\"\n                type=\"number\"\n                placeholder=\"Enter distance\"\n                value={formData.distance}\n                onChange={(e) => handleInputChange(\"distance\", e.target.value)}\n                className=\"text-base\"\n                min=\"0\"\n                step=\"0.1\"\n                data-testid=\"input-distance\"\n              />\n            </div>\n          </div>\n          \n          {/* Payout Calculation Display */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <div className=\"text-sm font-medium text-gray-700 mb-2\">Calculated Payout</div>\n            <div className=\"text-xl font-semibold text-success\" data-testid=\"calculated-payout\">\n              ₹{calculatedPayout.toLocaleString()}\n            </div>\n            {payoutFormula && (\n              <div className=\"text-xs text-gray-500 mt-1\" data-testid=\"payout-formula\">\n                {payoutFormula}\n              </div>\n            )}\n          </div>\n\n          <Button\n            type=\"submit\"\n            disabled={tripMutation.isPending}\n            className=\"w-full bg-primary text-white py-3 px-4 rounded-lg font-medium hover:bg-primary-dark transition-colors\"\n            data-testid=\"button-submit-trip\"\n          >\n            {tripMutation.isPending ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Logging Trip...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-save mr-2\"></i>\n                Log Trip\n              </>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7780},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { AdminDashboard } from \"@/components/AdminDashboard\";\nimport { ManagerDashboard } from \"@/components/ManagerDashboard\";\nimport { DriverDashboard } from \"@/components/DriverDashboard\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Home() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Will redirect in useEffect\n  }\n\n  // Render different dashboards based on user role\n  switch (user.role) {\n    case 'admin':\n      return <AdminDashboard />;\n    case 'manager':\n      return <ManagerDashboard />;\n    case 'driver':\n      return <DriverDashboard user={user} />;\n    default:\n      return (\n        <div className=\"text-center py-8\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Access Denied</h2>\n          <p className=\"text-gray-600\">Your account role is not recognized. Please contact an administrator.</p>\n        </div>\n      );\n  }\n}\n","size_bytes":1737},"client/src/pages/Landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary to-primary-dark flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"pt-6 pb-6 px-6 text-center\">\n          <div className=\"mb-6\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-bus text-white text-2xl\"></i>\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">PLS Travels</h1>\n            <p className=\"text-gray-600\">Fleet Management System</p>\n          </div>\n\n          <div className=\"mb-6\">\n            <p className=\"text-sm text-gray-500 mb-4\">\n              Comprehensive fleet management with role-based access control for drivers, managers, and administrators.\n            </p>\n            \n            <div className=\"text-left space-y-2 mb-4\">\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <i className=\"fas fa-check-circle text-success mr-2\"></i>\n                Driver trip logging and payout tracking\n              </div>\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <i className=\"fas fa-check-circle text-success mr-2\"></i>\n                Vehicle and driver management\n              </div>\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <i className=\"fas fa-check-circle text-success mr-2\"></i>\n                Automated payout calculations\n              </div>\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <i className=\"fas fa-check-circle text-success mr-2\"></i>\n                Manager approval workflows\n              </div>\n            </div>\n          </div>\n\n          <Button \n            onClick={() => window.location.href = '/api/login'}\n            className=\"w-full bg-primary hover:bg-primary-dark text-white\"\n            data-testid=\"login-button\"\n          >\n            <i className=\"fas fa-sign-in-alt mr-2\"></i>\n            Sign In to Continue\n          </Button>\n\n          <p className=\"text-xs text-gray-500 mt-4\">\n            Secure authentication powered by Replit\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2454},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}